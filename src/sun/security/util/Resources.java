/*     */ package sun.security.util;
/*     */ 
/*     */ import java.util.ListResourceBundle;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Resources
/*     */   extends ListResourceBundle
/*     */ {
/*  35 */   private static final Object[][] contents = new Object[][] { { "invalid.null.input.s.", "invalid null input(s)" }, { "actions.can.only.be.read.", "actions can only be 'read'" }, { "permission.name.name.syntax.invalid.", "permission name [{0}] syntax invalid: " }, { "Credential.Class.not.followed.by.a.Principal.Class.and.Name", "Credential Class not followed by a Principal Class and Name" }, { "Principal.Class.not.followed.by.a.Principal.Name", "Principal Class not followed by a Principal Name" }, { "Principal.Name.must.be.surrounded.by.quotes", "Principal Name must be surrounded by quotes" }, { "Principal.Name.missing.end.quote", "Principal Name missing end quote" }, { "PrivateCredentialPermission.Principal.Class.can.not.be.a.wildcard.value.if.Principal.Name.is.not.a.wildcard.value", "PrivateCredentialPermission Principal Class can not be a wildcard (*) value if Principal Name is not a wildcard (*) value" }, { "CredOwner.Principal.Class.class.Principal.Name.name", "CredOwner:\n\tPrincipal Class = {0}\n\tPrincipal Name = {1}" }, { "provided.null.name", "provided null name" }, { "provided.null.keyword.map", "provided null keyword map" }, { "provided.null.OID.map", "provided null OID map" }, { "NEWLINE", "\n" }, { "invalid.null.AccessControlContext.provided", "invalid null AccessControlContext provided" }, { "invalid.null.action.provided", "invalid null action provided" }, { "invalid.null.Class.provided", "invalid null Class provided" }, { "Subject.", "Subject:\n" }, { ".Principal.", "\tPrincipal: " }, { ".Public.Credential.", "\tPublic Credential: " }, { ".Private.Credentials.inaccessible.", "\tPrivate Credentials inaccessible\n" }, { ".Private.Credential.", "\tPrivate Credential: " }, { ".Private.Credential.inaccessible.", "\tPrivate Credential inaccessible\n" }, { "Subject.is.read.only", "Subject is read-only" }, { "attempting.to.add.an.object.which.is.not.an.instance.of.java.security.Principal.to.a.Subject.s.Principal.Set", "attempting to add an object which is not an instance of java.security.Principal to a Subject's Principal Set" }, { "attempting.to.add.an.object.which.is.not.an.instance.of.class", "attempting to add an object which is not an instance of {0}" }, { "LoginModuleControlFlag.", "LoginModuleControlFlag: " }, { "Invalid.null.input.name", "Invalid null input: name" }, { "No.LoginModules.configured.for.name", "No LoginModules configured for {0}" }, { "invalid.null.Subject.provided", "invalid null Subject provided" }, { "invalid.null.CallbackHandler.provided", "invalid null CallbackHandler provided" }, { "null.subject.logout.called.before.login", "null subject - logout called before login" }, { "unable.to.instantiate.LoginModule.module.because.it.does.not.provide.a.no.argument.constructor", "unable to instantiate LoginModule, {0}, because it does not provide a no-argument constructor" }, { "unable.to.instantiate.LoginModule", "unable to instantiate LoginModule" }, { "unable.to.instantiate.LoginModule.", "unable to instantiate LoginModule: " }, { "unable.to.find.LoginModule.class.", "unable to find LoginModule class: " }, { "unable.to.access.LoginModule.", "unable to access LoginModule: " }, { "Login.Failure.all.modules.ignored", "Login Failure: all modules ignored" }, { "java.security.policy.error.parsing.policy.message", "java.security.policy: error parsing {0}:\n\t{1}" }, { "java.security.policy.error.adding.Permission.perm.message", "java.security.policy: error adding Permission, {0}:\n\t{1}" }, { "java.security.policy.error.adding.Entry.message", "java.security.policy: error adding Entry:\n\t{0}" }, { "alias.name.not.provided.pe.name.", "alias name not provided ({0})" }, { "unable.to.perform.substitution.on.alias.suffix", "unable to perform substitution on alias, {0}" }, { "substitution.value.prefix.unsupported", "substitution value, {0}, unsupported" }, { "LPARAM", "(" }, { "RPARAM", ")" }, { "type.can.t.be.null", "type can't be null" }, { "keystorePasswordURL.can.not.be.specified.without.also.specifying.keystore", "keystorePasswordURL can not be specified without also specifying keystore" }, { "expected.keystore.type", "expected keystore type" }, { "expected.keystore.provider", "expected keystore provider" }, { "multiple.Codebase.expressions", "multiple Codebase expressions" }, { "multiple.SignedBy.expressions", "multiple SignedBy expressions" }, { "duplicate.keystore.domain.name", "duplicate keystore domain name: {0}" }, { "duplicate.keystore.name", "duplicate keystore name: {0}" }, { "SignedBy.has.empty.alias", "SignedBy has empty alias" }, { "can.not.specify.Principal.with.a.wildcard.class.without.a.wildcard.name", "can not specify Principal with a wildcard class without a wildcard name" }, { "expected.codeBase.or.SignedBy.or.Principal", "expected codeBase or SignedBy or Principal" }, { "expected.permission.entry", "expected permission entry" }, { "number.", "number " }, { "expected.expect.read.end.of.file.", "expected [{0}], read [end of file]" }, { "expected.read.end.of.file.", "expected [;], read [end of file]" }, { "line.number.msg", "line {0}: {1}" }, { "line.number.expected.expect.found.actual.", "line {0}: expected [{1}], found [{2}]" }, { "null.principalClass.or.principalName", "null principalClass or principalName" }, { "PKCS11.Token.providerName.Password.", "PKCS11 Token [{0}] Password: " }, { "unable.to.instantiate.Subject.based.policy", "unable to instantiate Subject-based policy" } };
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public Object[][] getContents() {
/* 169 */     return contents;
/*     */   }
/*     */ }


/* Location:              D:\tools\env\Java\jdk1.8.0_211\rt.jar!\sun\securit\\util\Resources.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */